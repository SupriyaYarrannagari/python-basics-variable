{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a3d5fe49",
   "metadata": {},
   "source": [
    "# python basic variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "21975259",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "after swapping\n",
      "x= 10\n",
      "y= 5\n"
     ]
    }
   ],
   "source": [
    "x=5\n",
    "y=10\n",
    "swap=x\n",
    "x=y\n",
    "y=swap\n",
    "print(\"after swapping\")\n",
    "print(\"x=\",x)\n",
    "print(\"y=\",y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c982f788",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a length of rectangle:34.5\n",
      "enter a width of rectangle:12.6\n",
      "869.4\n"
     ]
    }
   ],
   "source": [
    "length=float(input(\"enter a length of rectangle:\"))\n",
    "width=float(input(\"enter a width of rectangle:\"))\n",
    "print(2*length*width)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1456fd34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the celsius temperature:23.5\n",
      "temperature of fahrenheit: 74.3\n"
     ]
    }
   ],
   "source": [
    "celsius=float(input(\"enter the celsius temperature:\"))\n",
    "fahrenheit=(celsius*9/5)+32\n",
    "print(\"temperature of fahrenheit:\",fahrenheit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4427c5e",
   "metadata": {},
   "source": [
    "# String Based Questions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ab3c5c4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a string:pwskills\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "string=input(\"enter a string:\")\n",
    "print(len(string))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "58fa7444",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a sentence:The way to get started is to quit talking and begin doing.\n",
      "count the 'a'vowels: 4\n",
      "count the 'e' vowels: 4\n",
      "count the 'i' vowels: 5\n",
      "count the 'o' vowels: 3\n",
      "count the 'u' vowels: 1\n",
      "total number of vowels: 17\n"
     ]
    }
   ],
   "source": [
    "x=input(\"enter a sentence:\")\n",
    "x=x.lower()\n",
    "count_a=count_e=count_i=count_o=count_u=0\n",
    "for char in x:\n",
    "    if char=='a':\n",
    "        count_a+=1\n",
    "    elif char=='e':\n",
    "        count_e+=1\n",
    "    elif char=='i':\n",
    "        count_i+=1\n",
    "    elif char=='o':\n",
    "        count_o+=1\n",
    "    elif char=='u':\n",
    "        count_u+=1\n",
    "total_vowels=count_a+count_e+count_i+count_o+count_u\n",
    "print(\"count the 'a'vowels:\",count_a)\n",
    "print(\"count the 'e' vowels:\",count_e)\n",
    "print(\"count the 'i' vowels:\",count_i)\n",
    "print(\"count the 'o' vowels:\",count_o)\n",
    "print(\"count the 'u' vowels:\",count_u)\n",
    "print(\"total number of vowels:\",total_vowels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b13fa5a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a string:supriya reddy\n",
      "reversed string: ydder ayirpus\n"
     ]
    }
   ],
   "source": [
    "string=input(\"enter a string:\")\n",
    "reversed_string=string[::-1]\n",
    "print(\"reversed string:\",reversed_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fbb4f390",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a string:madam\n",
      "madam\n",
      "the string is a palindrome\n"
     ]
    }
   ],
   "source": [
    "input_string=input(\"enter a string:\")\n",
    "reversed_string=input_string[::-1]\n",
    "print(reversed_string)\n",
    "if input_string==reversed_string:\n",
    "    print(\"the string is a palindrome\")\n",
    "else:\n",
    "    print(\"the string is not a palindrome\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e9af4f6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a stringThe way to get started is to quit talking and begin doing.\n",
      "modified string without spaces: Thewaytogetstartedistoquittalkingandbegindoing.\n"
     ]
    }
   ],
   "source": [
    "string=input(\"enter a string\")\n",
    "modified_string=string.replace(\" \", \"\")\n",
    "print(\"modified string without spaces:\",modified_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ef46316",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
